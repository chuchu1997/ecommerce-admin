 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}




model User {
  id        String     @id @default(uuid())
  name      String  @db.VarChar(100)
  email     String? @unique //
  password  String
  role      Role    @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Store {
  id       String   @id @default(uuid())
  name     String
  userID   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  products Product[] @relation("StoreToProduct")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  subCategories Subcategory[] @relation("StoreToSubCategory")


}

model Category{

  id String @id @default(uuid())
  storeId String
  slug String @unique
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  name String @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  products Product[]  @relation("CategoryToProduct")
  subcategories Subcategory[]
  @@index([storeId])
    @@index([billboardId])


}
model Subcategory {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations to Category
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])


  storeId String 
  store Store @relation("StoreToSubCategory",fields: [storeId],references: [id])


  // Relation to Product
  products   Product[]
  @@index([categoryId])
  @@index([billboardId])
  @@index([storeId])
}



model Product {
  id String @id @default(uuid())
 
  name String @unique
  price Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  description String
  shortDescription String
  images Image[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  slug String @unique
  sku String
  viewCount Int @default(0)
  ratingCount Int @default(0)
 
  //RELATIONS 
   storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category  @relation("CategoryToProduct",fields: [categoryId],references: [id])
 
    subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  productSizes ProductSize[]
  productColors ProductColor[]

  stockQuantity Int
      @@index([storeId])
      @@index([categoryId])
        @@index([subcategoryId])

}

//DAY LA BANG TRUNG GIAN MOI QHE 1-1 SIZE + PRODUCT
model ProductSize {
   productId String
  product   Product @relation(fields: [productId], references: [id])
  
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])

  stockQuantity Int
    price Float?

  @@id([productId, sizeId]) // Composite primary key để tránh trùng lặp



  @@index([sizeId])
}
//DAY LA BANG TRUNG GIAN MOI QHE 1-1 COLOR + PRODUCT

model ProductColor{
    productId String
  product   Product @relation(fields: [productId], references: [id])
  
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])

  stockQuantity Int
  price Float?

  @@id([productId, colorId]) // Composite primary key để tránh trùng lặp



  @@index([colorId])
}

model Size { 
   id String @id @default(uuid())
   description String?
   name String

   storeId String
   store Store @relation("StoreToSize",fields: [storeId],references: [id])
    productSize ProductSize[]
   createAt DateTime @default(now())
   updateAt DateTime @updatedAt
    
   @@index([storeId])
}
model Color {
  id        String   @id @default(uuid())
  name      String   // e.g., "Red", "Blue", "Green", etc.
  hexCode   String?  // Optional hex color code (e.g., "#FF0000")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId String
  store Store @relation("StoreToColor",fields:[storeId],references: [id])
  // Relation to Product model
  productColor ProductColor[]
 
  @@index([storeId])
}


model Image { 
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([productId])
}
model Billboard{
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  label String
  imageUrl String
  category Category[]
  subCategory Subcategory[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId])
}

 enum Role {
  USER
  ADMIN
}