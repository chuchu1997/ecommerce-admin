 // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}




model User {
  id        String     @id @default(uuid())
  name      String  @db.VarChar(100)
  email     String? @unique //
  password  String
  role      Role    @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Store {
  id       String   @id @default(uuid())
  name     String
  userID   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  products Product[] @relation("StoreToProduct")

}

model Category{

  id String @id @default(uuid())
  storeId String
  slug String @unique
  store Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  name String @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  products Product[]  @relation("CategoryToProduct")

  @@index([storeId])
    @@index([billboardId])


}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category  @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String @unique
  price Float
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  description String
  shortDescription String
  images Image[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  slug String @unique
  sku String
  viewCount Int @default(0)
  ratingCount Int @default(0)
  stockQuantity Int
      @@index([storeId])
      @@index([categoryId])

}
model Image { 
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([productId])
}
model Billboard{
  id String @id @default(uuid())
  storeId String 
  store Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  label String
  imageUrl String
  category Category[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([storeId])
}

 enum Role {
  USER
  ADMIN
}